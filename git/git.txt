참고 사이트 https://backlog.com/git-tutorial/kr/stepup/stepup1_1.html


git -> 분산형 버전 관리 시스템

매번 내용이 바뀌는 것을 효율적으로 관리하기 위한 시스템이다.
ex) 다수가 동일한 내용을 매번 작업할 때 매일 비슷한 파일이 여러개가 생길 수 있다. -> 이 때 발생하는 에로사항을 git으로 한방에 처리 가능하다.

### git에서는 소스 코드가 변경된 이력을 쉽게 확인할 수 있고 특정 시점에 저장된 버전과 비교하거나 특정 시점을 되돌아 갈 수 도 있다.
### 내가 수정한 파일이 다른 사람이 작업한 내용이 충돌하면 경고 메시지를 발생시켜 내용이 누락되거나 사라지는 것을 방지할 수 있게한다.


----> Git으로 파일을 관리하면, 업데이트 이력이 Git에 저장된다. 따라서 매번 백업용 파일 복사본을 만들 필요가 없어 엄청 편하고 깔끔하다.

git repository에 파일 변경 이력 별로 구분되어 저장된다.

저장소는 원격(Remote) / 로컬(Local)이 있으며

로컬에서 파일을 작업하여 원격으로 보내고 또 원격에서 본래의 로컬 혹은 다른 로컬로 파일을 보내어 협업할 수 있게한다.


파일 및 폴더의 추가/변경 사항을 저장소에 기록하려면 커밋을해야한다.
커밋을 할경우 관련 변경된 사항을 메시지로 반드시 입력해야한다.

1번째 줄 : 커밋 내의 변경 내용을 요약
2번째 줄 : 빈 칸
3번째 줄 : 변경한 이유



----> git add [해당 파일명]                        / git add 취소 방법 git restore [해당 파일명]

----> git commit -m " [내용적는다.]                / git commit 취소 방법 git log --online         /         git reset [options] [돌아고 싶은 이전 커밋의 HEAD] 
options에는 총 세가지 존재한다. -soft / -mixed / -hard        
-soft는 index 보존(add, staged 상태), 워킹 디렉터리의 파일 보존 (아무것도 바꾸지 않는다.)
-mixed는 index취소 (add하기 전 상태, unstaged 상태), 워킹 디렉터리의 파일 보전(기본옵션)
-hard는 index취소 (add하기 전 상태, unstaged 상태). 워킹 디렉터리의 파일 삭제!!! (모두 취소)

-hard의 경우 index를 취소하는 것은 물론이며 파일을 삭제해버리니 주의!!!
-단, 이 명령을 사용하면 원격 저장소에 있는 마지막 commit 이후의 워킹 디렉터리와 add했던 파일들이 모두 사라지므로 주의해야 한다.


" (3줄 이상 적기 위해서는 마침 따옴표를 엔터 이후에 적는다. git bash에서 작동)
---> git push를 함으로써 원격 저장소에 밀어넣는다.